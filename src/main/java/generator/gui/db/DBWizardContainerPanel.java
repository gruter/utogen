/*
 * DBWizardContainerPanel.java
 *
 * Created on 25 May 2007, 02:45
 */

package generator.gui.db;

import generator.gui.graph.DBWizardEREditor;
import generator.db.DBGeneratorDefinition;
import generator.extenders.RandomiserInstance;
import generator.gui.*;
import generator.db.DBTableGenerator;
import generator.misc.ApplicationContext;
import generator.misc.DBDriverInfo;
import generator.misc.DBFileDefinition;
import generator.misc.DBFileDefinitionSaver;
import generator.misc.DBOutDataSaver;
import generator.misc.RandomiserType;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author  Michael
 */
public class DBWizardContainerPanel extends javax.swing.JPanel
{
    private Vector<DBDriverInfo> vDBInfo;
    private Vector<RandomiserInstance> vRI;
    private Vector<RandomiserType> vRT;
    
    private DBWizardAliasPanel pnlAlias;
    private DBWizardEREditor pnlGraphEditor;
    private DBWizardSavePanel pnlSave;
    private int idxWizard;
    private ArrayList<IWizardStep> alWizards;
    
    private DBGeneratorDefinition dbDefinition;
    
    /** Creates new form DBWizardContainerPanel */
    public DBWizardContainerPanel()
    {
        initComponents();
        
        //get the application context
        this.vDBInfo = ApplicationContext.getInstance().getDriverInfo();
        this.vRI = ApplicationContext.getInstance().getRandomiserInstances();
        this.vRT = ApplicationContext.getInstance().getRandomiserTypes();
        
        //initialise the item we will be carrying back and forth the wizard
        dbDefinition = new DBGeneratorDefinition();
        
        
        //initialise the panels, add the first one to the container
        pnlAlias = new DBWizardAliasPanel(vDBInfo);
        
        //we need to first link the object we will build
        ((IWizardStep)pnlAlias).setDBGeneratorDefinition(dbDefinition);
        
        pnlGraphEditor= new DBWizardEREditor();
        pnlSave = new DBWizardSavePanel();
        
        pnlContainer.setLayout( new BorderLayout() );
        pnlContainer.add(pnlAlias, BorderLayout.CENTER);
        
        
        //store them in the arraylist
        idxWizard = 0; //showing the first panel
        alWizards = new ArrayList();
        alWizards.add(pnlAlias);
        alWizards.add(pnlGraphEditor);
        alWizards.add(pnlSave);
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlContainer = new javax.swing.JPanel();
        btnPrevious = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();

        org.jdesktop.layout.GroupLayout pnlContainerLayout = new org.jdesktop.layout.GroupLayout(pnlContainer);
        pnlContainer.setLayout(pnlContainerLayout);
        pnlContainerLayout.setHorizontalGroup(
            pnlContainerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 551, Short.MAX_VALUE)
        );
        pnlContainerLayout.setVerticalGroup(
            pnlContainerLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 532, Short.MAX_VALUE)
        );

        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(pnlContainer, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(btnPrevious)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnNext, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 98, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(pnlContainer, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnNext)
                    .add(btnPrevious))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    
    
    
    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPreviousActionPerformed
    {//GEN-HEADEREND:event_btnPreviousActionPerformed
        if(idxWizard==0)
            return;
        btnNext.setText("Next");
        
        //get information from current panel
        IWizardStep wizardPanel = alWizards.get(idxWizard);
        
        //no need for validation or storing data here, only when going to next
        //show previous panel, set the values
        idxWizard--;
        if(idxWizard<0)
            idxWizard=0;
        
        wizardPanel = alWizards.get(idxWizard);
        
        pnlContainer.removeAll();
        pnlContainer.add( (JPanel)wizardPanel );
        pnlContainer.updateUI();
    }//GEN-LAST:event_btnPreviousActionPerformed
    
    
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnNextActionPerformed
    {//GEN-HEADEREND:event_btnNextActionPerformed
        //get information from current panel
        IWizardStep wizardPanel = alWizards.get(idxWizard);
        
        
        boolean isValid = wizardPanel.isWizardStepValid();
        if(isValid==false)
            return;
        
        //store state from that wizard
        dbDefinition = wizardPanel.getDBGeneratorDefinition();
        
        //show next panel, set the values
        idxWizard++;
        if(idxWizard==2)
        {
            btnNext.setText("Finish");
        }
        
        if(idxWizard>=alWizards.size())
        {
            idxWizard=alWizards.size()-1;
            saveDBDefinition();
        }
        
        wizardPanel = alWizards.get(idxWizard);
        wizardPanel.setDBGeneratorDefinition(dbDefinition);
        
        pnlContainer.removeAll();
        pnlContainer.add( (JPanel)wizardPanel );
        pnlContainer.updateUI();
    }//GEN-LAST:event_btnNextActionPerformed
    
    
    private void saveDBDefinition()
    {
        String name, description, filename;
        
        try
        {
            DBOutDataSaver dbSaver = new DBOutDataSaver();
            dbSaver.saveData(dbDefinition);
            
            Vector vDBD = ApplicationContext.getInstance().getDBD();
            DBFileDefinition dbFileDefinition = new DBFileDefinition();
                       
            dbFileDefinition.setDescription( dbDefinition.getDescription() );
            dbFileDefinition.setScenario( dbDefinition.getScenario() );
            dbFileDefinition.setLinkFileDB( dbDefinition.getFilename() );
            
                    
            vDBD.add(dbFileDefinition);
            
            DBFileDefinitionSaver dbFileDefSaver = new DBFileDefinitionSaver();
            dbFileDefSaver.saveData(vDBD);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        JOptionPane.showMessageDialog(this,"Database definition saved.","Message",JOptionPane.INFORMATION_MESSAGE);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JPanel pnlContainer;
    // End of variables declaration//GEN-END:variables
    
}
