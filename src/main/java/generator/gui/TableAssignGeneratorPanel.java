/*
 * TableAssignGeneratorPanel.java
 *
 * Created on 24 May 2007, 03:20
 */
package generator.gui;

import generator.db.DBForeignKey;
import generator.db.DBUtils;
import generator.extenders.RandomiserInstance;
import generator.db.DBTableGenerator;
import generator.misc.ApplicationContext;
import generator.misc.RandomiserType;
import generator.misc.TableUtilities;
import generator.misc.Utils;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.AbstractCellEditor;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import org.apache.log4j.Logger;

/**
 *
 * @author  Michael
 */
public class TableAssignGeneratorPanel extends javax.swing.JPanel
{

    private Vector<RandomiserInstance> vRI;
    private Vector<RandomiserType> vRT;
    private DefaultTableModel modelTB = new DefaultTableModel();
    private JComboBox jComboBox1 = new JComboBox();
    private DBTableGenerator dbTableGenerator;
    private Logger logger = Logger.getLogger(MainForm.class);

    /** Creates new form TableAssignGeneratorPanel */
    public TableAssignGeneratorPanel()
    {
        initComponents();

        vRI = ApplicationContext.getInstance().getRandomiserInstances();
        vRT = ApplicationContext.getInstance().getRandomiserTypes();

        modelTB.addColumn("PK");
        modelTB.addColumn("Field");
        modelTB.addColumn("Type");
        modelTB.addColumn("Size");
        modelTB.addColumn("Generic Type");
        modelTB.addColumn("Generator");
        tblTableGenAssign.setModel(modelTB);

        tblTableGenAssign.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        //set the cell editor for the Generator column (combo box)
        TableColumn col = tblTableGenAssign.getColumnModel().getColumn(5);
        col.setCellEditor(new MyTableCellEditor(vRI, vRT));

        //make sure a combo box can fit into the cells (otherwise cmb is "chopped" vertically)
        JComboBox cmb = new JComboBox(new Object[]
                {
                    "DEFAULT HEIGHT"
                });
        tblTableGenAssign.setRowHeight(jComboBox1.getPreferredSize().height - 5);

        //the first column has its contents centered
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(JLabel.CENTER);
        tblTableGenAssign.getColumnModel().getColumn(0).setCellRenderer(renderer);


        int width;
        width = TableUtilities.calculateColumnWidth(tblTableGenAssign, 0);
        tblTableGenAssign.getColumnModel().getColumn(0).setPreferredWidth(width);

        width = TableUtilities.calculateColumnWidth(tblTableGenAssign, 3);
        tblTableGenAssign.getColumnModel().getColumn(3).setPreferredWidth(width);
        tblTableGenAssign.setGridColor(Color.BLACK);


    }

    public void setTableInfo(DBTableGenerator dbTableGen)
    {
        this.dbTableGenerator = dbTableGen;
        Vector vData = new Vector();
        int numOfFields = dbTableGen.getNumFields();
        String field, type;
        Integer size;
        Object row[] = new Object[6];
        DBUtils dbUtils = new DBUtils();

        for (int i = 0; i < numOfFields; i++)
        {
            field = dbTableGen.fieldNameAt(i);
            type = dbTableGen.fieldTypeAt(i);
            size = Integer.valueOf(dbTableGen.fieldSizeAt(i));
            row[1] = field;
            row[2] = type;
            row[3] = size;
            row[4] = DBUtils.getJdbcTypeName(dbTableGen.genericFieldTypeAt(i));

            //put the generator by default, unless there is a foreign key
            //foreign key has higher precedence, if it has been set
            row[5] = dbTableGen.getGenerator(i);
            String fkey = dbTableGen.getForeignKeyForField(dbTableGen.fieldNameAt(i));
            if (fkey.length() > 0)
            {
                row[5] = fkey;
                dbTableGen.setFieldGenerator(i, fkey);
            }
            modelTB.addRow(row);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTableGenAssign = new javax.swing.JTable();
        btnSave = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Generators Assignment"));

        tblTableGenAssign.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblTableGenAssign.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        tblTableGenAssign.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(tblTableGenAssign);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 661, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
        );

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .addContainerGap(610, Short.MAX_VALUE)
                        .add(btnSave, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnSave)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnSaveActionPerformed
    {//GEN-HEADEREND:event_btnSaveActionPerformed
        int numOfFields = dbTableGenerator.getNumFields();
        String generator;
        Integer size;
        DBUtils dbUtils = new DBUtils();


        tblTableGenAssign.editingStopped(null);

        logger.debug(dbTableGenerator.getName() + ", count:" + modelTB.getRowCount());
        for (int i = 0; i < modelTB.getRowCount(); i++)
        {
            generator = (String) modelTB.getValueAt(i, 5);
            logger.debug("setting data generator:" + generator);
            dbTableGenerator.setFieldGenerator(i, generator);
        }
        getTopLevelAncestor().setVisible(false);


        for (int i = 0; i < dbTableGenerator.getForeignKeysSize(); i++)
        {
            DBForeignKey dbFKey = dbTableGenerator.getForeyKeyAt(i);
            String fkey = dbFKey.getMasterTable() + "." + dbFKey.getMasterField() + "-->" + dbFKey.getDetailsTable() + "." + dbFKey.getDetailsField();

            logger.debug("foreign key:" + fkey);
        }
    }//GEN-LAST:event_btnSaveActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTableGenAssign;
    // End of variables declaration//GEN-END:variables
}

class MyTableCellEditor extends AbstractCellEditor implements TableCellEditor
{

    Vector<RandomiserInstance> vRI;
    Vector<RandomiserType> vRT;
    // This is the component that will handle the editing of the cell value
    JComboBox cmbData = new JComboBox();
    DBUtils dbUtils;
    Logger logger = Logger.getLogger(MyTableCellEditor.class);

    public MyTableCellEditor(Vector<RandomiserInstance> vRI, Vector<RandomiserType> vRT)
    {
        this.vRI = vRI;
        this.vRT = vRT;
        dbUtils = new DBUtils();
    }

    public void loadCompatibleGenerators(String sqlType)
    {
        ArrayList<Integer> alJavaTypes = dbUtils.getCompatibleJavaTypes(sqlType);
        int riJavaType;
        Utils utils = new Utils();

        logger.debug("Will try to load randomisers for type: " + sqlType);
        cmbData.removeAllItems();
        for (RandomiserInstance ri : vRI)
        {
            riJavaType = utils.getRandomiserJavaType(ri, vRT);
            for (Integer javaType : alJavaTypes)
            {
                if (riJavaType == javaType)
                {
                    cmbData.addItem(ri.getName());
                }
            }
        }
        cmbData.setSelectedIndex(0);
    }

    // This method is called when a cell value is edited by the user.
    public Component getTableCellEditorComponent(JTable table, Object value,
            boolean isSelected, int rowIndex, int vColIndex)
    {
        // 'value' is value contained in the cell located at (rowIndex, vColIndex)
        String sqlType = (String) table.getModel().getValueAt(rowIndex, 4);

        if (isSelected)
        {
            // cell (and perhaps other cells) are selected
        }
        loadCompatibleGenerators(sqlType);

        // Return the configured component
        return (Component) cmbData;
    }

    // This method is called when editing is completed.
    // It must return the new value to be stored in the cell.
    public Object getCellEditorValue()
    {
        return cmbData.getSelectedItem();
    }
}

class CellViewRenderer extends JComboBox implements TableCellRenderer
{

    public CellViewRenderer()
    {
        super();
    }

    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
    {
        removeAllItems();
        addItem((String) value);
        return this;
    }
}