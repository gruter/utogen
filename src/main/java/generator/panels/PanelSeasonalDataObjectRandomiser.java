/*
 * PanelRegularExpressionRandomiser.java
 *
 * Created on 28 February 2008, 00:21
 */

package generator.panels;

import generator.extenders.RandomiserInstance;
import generator.extenders.RandomiserPanel;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.sql.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;

/**
 *
 * @author  Administrator
 */
public class PanelSeasonalDataObjectRandomiser extends RandomiserPanel
{
    Logger logger = Logger.getLogger(PanelRegularExpressionRandomiser.class);
    Map mapValues= new HashMap();
    Vector vModelColumns;
    
    /** Creates new form PanelRegularExpressionRandomiser */
    public PanelSeasonalDataObjectRandomiser()
    {
        initComponents();
        
        newModelDates.addColumn("From");
        newModelDates.addColumn("To");
        newModelDates.addColumn("Percentage");
        
        tblDateRanges.setModel(newModelDates);
        
        newModelValues.addColumn("From");
        newModelValues.addColumn("To");
        newModelValues.addColumn("Percentage");
        
        vModelColumns = new Vector();
        vModelColumns.add("From");
        vModelColumns.add("To");
        vModelColumns.add("Percentage");
        tblValuesRanges.setModel(newModelValues);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        spinNull = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtFromValue = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtToValue = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtPercentValue = new javax.swing.JTextField();
        btnAddValueRange = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblValuesRanges = new javax.swing.JTable();
        btnRemoveDate1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        txtFromDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtToDate = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtPercentDate = new javax.swing.JTextField();
        btnAddDateRange = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDateRanges = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        btnRemoveDate = new javax.swing.JButton();
        pnlDays = new javax.swing.JPanel();
        cmbGeneratedTypes = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Case description"));

        jLabel4.setText("Name:");

        jLabel5.setText("Description:");

        txtDescription.setColumns(20);
        txtDescription.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        txtDescription.setLineWrap(true);
        txtDescription.setRows(5);
        jScrollPane1.setViewportView(txtDescription);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel4)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(txtName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 207, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 857, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(txtName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel5)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Percentages of generated values"));

        jLabel6.setText("Null:");

        jLabel2.setText("From:");

        jLabel9.setText("To:");

        jLabel10.setText("Percentage:");

        btnAddValueRange.setText("Add range");
        btnAddValueRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddValueRangeActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(tblValuesRanges);

        btnRemoveDate1.setText("Remove Selected");
        btnRemoveDate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDate1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(btnRemoveDate1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 155, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel2)
                            .add(jLabel10)
                            .add(jLabel9))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, btnAddValueRange, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, txtPercentValue)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, txtToValue)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, txtFromValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 135, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel2)
                            .add(txtFromValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel9)
                            .add(txtToValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(txtPercentValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel10))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnAddValueRange))
                    .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnRemoveDate1)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel11.setText("From:");

        jLabel3.setText("To:");

        jLabel7.setText("Percentage:");

        btnAddDateRange.setText("Add range");
        btnAddDateRange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDateRangeActionPerformed(evt);
            }
        });

        jScrollPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane2MouseClicked(evt);
            }
        });

        tblDateRanges.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDateRangesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDateRanges);

        jLabel8.setText("Excluding days:");

        btnRemoveDate.setText("Remove Selected");
        btnRemoveDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDateActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel7)
                            .add(jLabel3)
                            .add(jLabel11))
                        .add(4, 4, 4)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(btnAddDateRange, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(txtPercentDate)
                            .add(txtToDate)
                            .add(txtFromDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 714, Short.MAX_VALUE))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jLabel8)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlDays, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 350, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 336, Short.MAX_VALUE)
                        .add(btnRemoveDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 151, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel11)
                            .add(txtFromDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel3)
                            .add(txtToDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel7)
                            .add(txtPercentDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnAddDateRange))
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel8)
                    .add(pnlDays, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnRemoveDate))
                .addContainerGap())
        );

        cmbGeneratedTypes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Byte", "Integer", "Float", "Double" }));

        jLabel1.setText("Generated type:");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(spinNull, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cmbGeneratedTypes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 154, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(cmbGeneratedTypes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 70, Short.MAX_VALUE)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(spinNull, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblDateRangesMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblDateRangesMouseClicked
    {//GEN-HEADEREND:event_tblDateRangesMouseClicked
        int row = tblDateRanges.getSelectedRow();
        
        Vector vRow = (Vector) newModelDates.getDataVector().elementAt(row);
        if(row==-1)
        {
            JOptionPane.showMessageDialog(this,"A dates row must first be selected; values will be linked to that date range","Constraint Error",JOptionPane.ERROR_MESSAGE);
            return;
        }        
        String key=getRowKey(vRow);
        
        TableSoftModel modelValues = (TableSoftModel) mapValues.get(key);
        if(modelValues!=null) 
        {
            newModelValues.setDataVector((Vector)modelValues.getRows(), (Vector)vModelColumns);
        }
    }//GEN-LAST:event_tblDateRangesMouseClicked

    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_jScrollPane2MouseClicked
    {//GEN-HEADEREND:event_jScrollPane2MouseClicked

    }//GEN-LAST:event_jScrollPane2MouseClicked

    private void btnRemoveDate1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRemoveDate1ActionPerformed
    {//GEN-HEADEREND:event_btnRemoveDate1ActionPerformed
        int row = tblDateRanges.getSelectedRow();
        
        Vector vRow = (Vector) newModelDates.getDataVector().elementAt(row);
        if(row==-1)
        {            
            return;
        }        
        
        newModelValues.removeRow(row);
        String key=getRowKey(vRow);
        
        TableSoftModel modelValues = (TableSoftModel) mapValues.get(key);
        modelValues.removeRow(row);
    }//GEN-LAST:event_btnRemoveDate1ActionPerformed

    private void btnAddValueRangeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddValueRangeActionPerformed
    {//GEN-HEADEREND:event_btnAddValueRangeActionPerformed
        String sFrom   = txtFromValue.getText();
        String sTo     = txtToValue.getText();
        String sPercent= txtPercentValue.getText();
        Object obj[] = new Object[3];        
        
        int row = tblDateRanges.getSelectedRow();
        if(row==-1)
        {
            JOptionPane.showMessageDialog(this,"A dates row must first be selected; values will be linked to that date range","Constraint Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
                
        obj[0] = sFrom;
        obj[1] = sTo;
        obj[2] = sPercent;
        
        Vector vRow = (Vector) newModelDates.getDataVector().elementAt(row);
        String key=getRowKey(vRow);        
        
        
        
        TableSoftModel modelValues = (TableSoftModel) mapValues.get(key);
        if(modelValues==null) 
        {
            modelValues = new TableSoftModel();
            modelValues.addRowValues(obj);
        }else
        {
            modelValues.addRowValues(obj);
        }
        newModelValues.setDataVector((Vector)modelValues.getRows(), (Vector)vModelColumns);
        mapValues.put(key, modelValues);        
    }//GEN-LAST:event_btnAddValueRangeActionPerformed
            
    private void btnRemoveDateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnRemoveDateActionPerformed
    {//GEN-HEADEREND:event_btnRemoveDateActionPerformed
        int row = tblDateRanges.getSelectedRow();
        if(row==-1)
        {
            return;
        }
        
        Vector vRow = (Vector) newModelDates.getDataVector().elementAt(row);
        String key=getRowKey(vRow);          
        TableSoftModel modelValues = (TableSoftModel) mapValues.get(key);
        mapValues.remove(key);
        
        newModelDates.removeRow(row);
    }//GEN-LAST:event_btnRemoveDateActionPerformed
    
    
    private String getRowKey(Vector vRow)   
    {
        String key="";
        for(Object o: vRow)
        {
            key+="-"+o;
        }
        key=key.substring(1);
        logger.debug("Key for selected row: "+key);
        return key;
    }
            
    private void btnAddDateRangeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddDateRangeActionPerformed
    {//GEN-HEADEREND:event_btnAddDateRangeActionPerformed
        String sFrom, sTo, sPercent,sPattern;
        Date iValues[] = new Date[2];
        Integer intValue;
        DateFormat df;
        int    error=0;
        Object obj[] = new Object[3];
        SimpleDateFormat dateFormat;
        
        sFrom   = txtFromDate.getText();
        sTo     = txtToDate.getText();
        sPercent= txtPercentDate.getText();
        
        try
        {iValues[0] = Date.valueOf(sFrom);}
        catch(Exception e)
        {error=1;}
        
        try
        {iValues[1] = Date.valueOf(sTo);}
        catch(Exception e)
        {error=2;}
        
        if(error>0)
        {
            JOptionPane.showMessageDialog(this,"Values for the fields From, To should conform to the format yyyy-mm-dd.","Invalid field",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(iValues[0].getTime()>iValues[1].getTime())
        {
            JOptionPane.showMessageDialog(this,"From value should be lower than to value.","Invalid field",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try
        {intValue = Integer.parseInt(sPercent);}
        catch(Exception e)
        {error=3; intValue = Integer.parseInt("-1");}
        
        
        if(error>0 || intValue.intValue()<=0)
        {
            JOptionPane.showMessageDialog(this,"Percentage field should be a positive integer.","Invalid field",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        
        obj[0] = iValues[0];
        obj[1] = iValues[1];
        obj[2] = intValue;
        newModelDates.addRow(obj);
    }//GEN-LAST:event_btnAddDateRangeActionPerformed
    
    public void initialise(RandomiserInstance ri)
    {
        LinkedHashMap hashmap;
        String sMax, sFromDate, sDateTo, sPercent, sNull, sSelectedDays;
        int    iMax;
        Object objValues[] = new Object[3];
        
        txtName.setText(ri.getName());
        txtDescription.setText(ri.getDescription());
        
        hashmap = ri.getProperties();
        sMax = (String)hashmap.get("rangesNum");
        try
        {
            iMax = Integer.parseInt(sMax);
            for(int i=0; i<iMax; i++)
            {
                sFromDate =(String)hashmap.get("fromField"+i);
                objValues[0] = Date.valueOf(sFromDate);
                sDateTo =(String)hashmap.get("toField"+i);
                objValues[1] = Date.valueOf(sDateTo);
                sPercent =(String)hashmap.get("percentField"+i);
                objValues[2] = Integer.valueOf(sPercent);
                
                newModelDates.addRow(objValues);
            }
            sNull  = (String) hashmap.get("nullField");
            spinNull.setValue(Integer.parseInt(sNull));
        }
        catch(Exception e)
        {
            logger.warn("Error while setting properties:",e);
        }
        sSelectedDays = (String)hashmap.get("selectedDays");     
    }
    
    public boolean isFormValid()
    {
        SimpleDateFormat dateFormat;
        String  name,sDateFrom, sDateTo, sPercent;
        Object  objValues[] = new Object[3];
        int     temp,percent;
        Date    dateFrom, dateTo;
        
        //get field values
        name = txtName.getText().trim();
        
        //run checks, empty strings, no data in the table
        if(name.length()==0)
        {
            JOptionPane.showMessageDialog(this,"Please provide a value for the name","Required field",JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if(newModelDates.getRowCount()==0)
        {
            JOptionPane.showMessageDialog(this,"Please add at least one range in the ranges table.","Required field",JOptionPane.ERROR_MESSAGE);
            return false;
        }
        //retrieve the values from the table and make sure they are numbers
        //make sure that percentages add up to 100
        percent   = 0;
        for(int i = 0; i<newModelDates.getRowCount(); i++)
        {
            try
            {
                objValues[0] = (Object) newModelDates.getValueAt(i,0);
                objValues[1] = (Object) newModelDates.getValueAt(i,1);
                objValues[2] = (Object) newModelDates.getValueAt(i,2);
                sDateFrom = objValues[0].toString();
                sDateTo   = objValues[1].toString();
                sPercent  = objValues[2].toString();
                dateFrom  = Date.valueOf(sDateFrom);
                dateTo    = Date.valueOf(sDateTo);
                
                if( dateFrom.getTime() > dateTo.getTime())
                {
                    JOptionPane.showMessageDialog(this,"From date has a higher value than To date.","Invalid field",JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                temp = Integer.valueOf(sPercent);
                percent+=temp;
            }
            catch(Exception e)
            {
                logger.warn("Error retrieving data from table",e);
                JOptionPane.showMessageDialog(this,"Values in the table should be dates (from,to) or numerical (percent.).","Invalid data",JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        if(percent!=100)
        {
            JOptionPane.showMessageDialog(this,"Percentages in the table should add up to 100.","Invalid data",JOptionPane.ERROR_MESSAGE);
            return false;
        }       
        
        
        return true;
    }
    
    public RandomiserInstance getRandomiserInstance()
    {
        RandomiserInstance ri = new RandomiserInstance();
        LinkedHashMap hashmap = new LinkedHashMap();
        String  name,sDateFrom, sDateTo, sPercent, sDays;
        Date    dateFrom, dateTo;
        Object objValues[] = new Object[3];
        int rowCount, error, percent;
        
        ri.setName(txtName.getText());
        ri.setDescription(txtDescription.getText());
        ri.setRandomiserType("DateRandomiser");
        
        error = 0;
        rowCount = tblDateRanges.getRowCount();
        hashmap.put("rangesNum",""+rowCount);
        for(int i = 0; i<rowCount; i++)
        {
            try
            {
                objValues[0] = (Object) newModelDates.getValueAt(i,0);
                objValues[1] = (Object) newModelDates.getValueAt(i,1);
                objValues[2] = (Object) newModelDates.getValueAt(i,2);
                sDateFrom = objValues[0].toString();
                sDateTo   = objValues[1].toString();
                sPercent  = objValues[2].toString();
                dateFrom  = Date.valueOf(sDateFrom);
                dateTo    = Date.valueOf(sDateTo);
                if( dateFrom.getTime() > dateTo.getTime())
                {
                    logger.warn("Problem retrieving table values, From date is higher than To date");
                    error = i;
                    return null;
                }
                percent = Integer.valueOf(sPercent);
                hashmap.put("fromField"+i, sDateFrom );
                hashmap.put("toField"+i, sDateTo );
                hashmap.put("percentField"+i,""+ percent );
            }
            catch(Exception e)
            {
                logger.warn("Problem retrieving table values",e);
                error = i;
            }
        }
        

        
        hashmap.put("nullField",""+spinNull.getValue());        
        ri.setProperties(hashmap);
        return ri;
    }
    
    private DefaultTableModel newModelDates = new DefaultTableModel();
    private DefaultTableModel newModelValues = new DefaultTableModel();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddDateRange;
    private javax.swing.JButton btnAddValueRange;
    private javax.swing.JButton btnRemoveDate;
    private javax.swing.JButton btnRemoveDate1;
    private javax.swing.JComboBox cmbGeneratedTypes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel pnlDays;
    private javax.swing.JSpinner spinNull;
    private javax.swing.JTable tblDateRanges;
    private javax.swing.JTable tblValuesRanges;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtFromDate;
    private javax.swing.JTextField txtFromValue;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPercentDate;
    private javax.swing.JTextField txtPercentValue;
    private javax.swing.JTextField txtToDate;
    private javax.swing.JTextField txtToValue;
    // End of variables declaration//GEN-END:variables

    
    class TableSoftModel
    {
        Vector dataRow = new Vector();
        
        
        public void addRowValues(Object[] objValues)
        {
            Vector vColumns = new Vector();
            
            for(Object o: objValues)
            {
                vColumns.add(o);
            }
            dataRow.add(vColumns);
        }
        
        public void removeRow(int rowIdx)
        {
            dataRow.remove(rowIdx);
        }
        
        public Vector getRows()
        {
            return dataRow;
        }
    }
}
